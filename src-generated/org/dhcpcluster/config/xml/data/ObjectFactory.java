//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.12.28 at 06:14:30 AM CET 
//


package org.dhcpcluster.config.xml.data;

import java.net.InetAddress;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.dhcpcluster.config.xml.data package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _OptionsOptionHostName_QNAME = new QName("", "option-host-name");
    private final static QName _OptionsOptionTimeServers_QNAME = new QName("", "option-time-servers");
    private final static QName _OptionsOptionRouters_QNAME = new QName("", "option-routers");
    private final static QName _FilterFilterAndFilterAlwaysFalse_QNAME = new QName("", "filter-always-false");
    private final static QName _FilterFilterAndFilterAlwaysTrue_QNAME = new QName("", "filter-always-true");
    private final static QName _FilterFilterAndFilterAnd_QNAME = new QName("", "filter-and");
    private final static QName _FilterFilterAndFilterOr_QNAME = new QName("", "filter-or");
    private final static QName _FilterFilterAndFilterNot_QNAME = new QName("", "filter-not");
    private final static QName _FilterFilterAndFilterNumOption_QNAME = new QName("", "filter-num-option");
    private final static QName _Giaddr_QNAME = new QName("", "giaddr");
    private final static QName _ValueRaw64_QNAME = new QName("", "value-raw64");
    private final static QName _ValueRawhex_QNAME = new QName("", "value-rawhex");
    private final static QName _ValueInt_QNAME = new QName("", "value-int");
    private final static QName _ValueByte_QNAME = new QName("", "value-byte");
    private final static QName _Mirror_QNAME = new QName("", "mirror");
    private final static QName _ValueInet_QNAME = new QName("", "value-inet");
    private final static QName _ValueShort_QNAME = new QName("", "value-short");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.dhcpcluster.config.xml.data
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Static }
     * 
     */
    public Static createStatic() {
        return new Static();
    }

    /**
     * Create an instance of {@link DhcpServer.Topology.Subnet }
     * 
     */
    public DhcpServer.Topology.Subnet createDhcpServerTopologySubnet() {
        return new DhcpServer.Topology.Subnet();
    }

    /**
     * Create an instance of {@link Filter.FilterNumOption }
     * 
     */
    public Filter.FilterNumOption createFilterFilterNumOption() {
        return new Filter.FilterNumOption();
    }

    /**
     * Create an instance of {@link TypeOptionInets }
     * 
     */
    public TypeOptionInets createTypeOptionInets() {
        return new TypeOptionInets();
    }

    /**
     * Create an instance of {@link DhcpServer }
     * 
     */
    public DhcpServer createDhcpServer() {
        return new DhcpServer();
    }

    /**
     * Create an instance of {@link DhcpServer.FrontEnd.Listen }
     * 
     */
    public DhcpServer.FrontEnd.Listen createDhcpServerFrontEndListen() {
        return new DhcpServer.FrontEnd.Listen();
    }

    /**
     * Create an instance of {@link EmptyType }
     * 
     */
    public EmptyType createEmptyType() {
        return new EmptyType();
    }

    /**
     * Create an instance of {@link TypeOptionInet }
     * 
     */
    public TypeOptionInet createTypeOptionInet() {
        return new TypeOptionInet();
    }

    /**
     * Create an instance of {@link Filter.FilterAnd }
     * 
     */
    public Filter.FilterAnd createFilterFilterAnd() {
        return new Filter.FilterAnd();
    }

    /**
     * Create an instance of {@link Filter.FilterOr }
     * 
     */
    public Filter.FilterOr createFilterFilterOr() {
        return new Filter.FilterOr();
    }

    /**
     * Create an instance of {@link Option }
     * 
     */
    public Option createOption() {
        return new Option();
    }

    /**
     * Create an instance of {@link DhcpServer.Global }
     * 
     */
    public DhcpServer.Global createDhcpServerGlobal() {
        return new DhcpServer.Global();
    }

    /**
     * Create an instance of {@link DhcpServer.FrontEnd }
     * 
     */
    public DhcpServer.FrontEnd createDhcpServerFrontEnd() {
        return new DhcpServer.FrontEnd();
    }

    /**
     * Create an instance of {@link Options }
     * 
     */
    public Options createOptions() {
        return new Options();
    }

    /**
     * Create an instance of {@link DhcpServer.Topology.Subnet.Range }
     * 
     */
    public DhcpServer.Topology.Subnet.Range createDhcpServerTopologySubnetRange() {
        return new DhcpServer.Topology.Subnet.Range();
    }

    /**
     * Create an instance of {@link Filter.FilterNot }
     * 
     */
    public Filter.FilterNot createFilterFilterNot() {
        return new Filter.FilterNot();
    }

    /**
     * Create an instance of {@link DhcpServer.FrontEnd.Threads }
     * 
     */
    public DhcpServer.FrontEnd.Threads createDhcpServerFrontEndThreads() {
        return new DhcpServer.FrontEnd.Threads();
    }

    /**
     * Create an instance of {@link OptionGeneric }
     * 
     */
    public OptionGeneric createOptionGeneric() {
        return new OptionGeneric();
    }

    /**
     * Create an instance of {@link DhcpServer.Global.Server }
     * 
     */
    public DhcpServer.Global.Server createDhcpServerGlobalServer() {
        return new DhcpServer.Global.Server();
    }

    /**
     * Create an instance of {@link Filter }
     * 
     */
    public Filter createFilter() {
        return new Filter();
    }

    /**
     * Create an instance of {@link DhcpServer.Topology }
     * 
     */
    public DhcpServer.Topology createDhcpServerTopology() {
        return new DhcpServer.Topology();
    }

    /**
     * Create an instance of {@link TypeFilterRoot }
     * 
     */
    public TypeFilterRoot createTypeFilterRoot() {
        return new TypeFilterRoot();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeOptionInet }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "option-host-name", scope = Options.class)
    public JAXBElement<TypeOptionInet> createOptionsOptionHostName(TypeOptionInet value) {
        return new JAXBElement<TypeOptionInet>(_OptionsOptionHostName_QNAME, TypeOptionInet.class, Options.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeOptionInets }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "option-time-servers", scope = Options.class)
    public JAXBElement<TypeOptionInets> createOptionsOptionTimeServers(TypeOptionInets value) {
        return new JAXBElement<TypeOptionInets>(_OptionsOptionTimeServers_QNAME, TypeOptionInets.class, Options.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeOptionInets }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "option-routers", scope = Options.class)
    public JAXBElement<TypeOptionInets> createOptionsOptionRouters(TypeOptionInets value) {
        return new JAXBElement<TypeOptionInets>(_OptionsOptionRouters_QNAME, TypeOptionInets.class, Options.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeFilterRoot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-always-false", scope = Filter.FilterAnd.class)
    public JAXBElement<TypeFilterRoot> createFilterFilterAndFilterAlwaysFalse(TypeFilterRoot value) {
        return new JAXBElement<TypeFilterRoot>(_FilterFilterAndFilterAlwaysFalse_QNAME, TypeFilterRoot.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeFilterRoot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-always-true", scope = Filter.FilterAnd.class)
    public JAXBElement<TypeFilterRoot> createFilterFilterAndFilterAlwaysTrue(TypeFilterRoot value) {
        return new JAXBElement<TypeFilterRoot>(_FilterFilterAndFilterAlwaysTrue_QNAME, TypeFilterRoot.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterAnd }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-and", scope = Filter.FilterAnd.class)
    public JAXBElement<Filter.FilterAnd> createFilterFilterAndFilterAnd(Filter.FilterAnd value) {
        return new JAXBElement<Filter.FilterAnd>(_FilterFilterAndFilterAnd_QNAME, Filter.FilterAnd.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterOr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-or", scope = Filter.FilterAnd.class)
    public JAXBElement<Filter.FilterOr> createFilterFilterAndFilterOr(Filter.FilterOr value) {
        return new JAXBElement<Filter.FilterOr>(_FilterFilterAndFilterOr_QNAME, Filter.FilterOr.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterNot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-not", scope = Filter.FilterAnd.class)
    public JAXBElement<Filter.FilterNot> createFilterFilterAndFilterNot(Filter.FilterNot value) {
        return new JAXBElement<Filter.FilterNot>(_FilterFilterAndFilterNot_QNAME, Filter.FilterNot.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterNumOption }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-num-option", scope = Filter.FilterAnd.class)
    public JAXBElement<Filter.FilterNumOption> createFilterFilterAndFilterNumOption(Filter.FilterNumOption value) {
        return new JAXBElement<Filter.FilterNumOption>(_FilterFilterAndFilterNumOption_QNAME, Filter.FilterNumOption.class, Filter.FilterAnd.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "giaddr")
    public JAXBElement<String> createGiaddr(String value) {
        return new JAXBElement<String>(_Giaddr_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link byte[]}{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-raw64")
    public JAXBElement<byte[]> createValueRaw64(byte[] value) {
        return new JAXBElement<byte[]>(_ValueRaw64_QNAME, byte[].class, null, ((byte[]) value));
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link byte[]}{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-rawhex")
    @XmlJavaTypeAdapter(HexBinaryAdapter.class)
    public JAXBElement<byte[]> createValueRawhex(byte[] value) {
        return new JAXBElement<byte[]>(_ValueRawhex_QNAME, byte[].class, null, ((byte[]) value));
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Integer }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-int")
    public JAXBElement<Integer> createValueInt(Integer value) {
        return new JAXBElement<Integer>(_ValueInt_QNAME, Integer.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Byte }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-byte")
    @XmlJavaTypeAdapter(Adapter1 .class)
    public JAXBElement<Byte> createValueByte(Byte value) {
        return new JAXBElement<Byte>(_ValueByte_QNAME, Byte.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mirror")
    public JAXBElement<EmptyType> createMirror(EmptyType value) {
        return new JAXBElement<EmptyType>(_Mirror_QNAME, EmptyType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InetAddress }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-inet")
    @XmlJavaTypeAdapter(Adapter3 .class)
    public JAXBElement<InetAddress> createValueInet(InetAddress value) {
        return new JAXBElement<InetAddress>(_ValueInet_QNAME, InetAddress.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Short }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "value-short")
    @XmlJavaTypeAdapter(Adapter2 .class)
    public JAXBElement<Short> createValueShort(Short value) {
        return new JAXBElement<Short>(_ValueShort_QNAME, Short.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeFilterRoot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-always-false", scope = Filter.FilterOr.class)
    public JAXBElement<TypeFilterRoot> createFilterFilterOrFilterAlwaysFalse(TypeFilterRoot value) {
        return new JAXBElement<TypeFilterRoot>(_FilterFilterAndFilterAlwaysFalse_QNAME, TypeFilterRoot.class, Filter.FilterOr.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterAnd }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-and", scope = Filter.FilterOr.class)
    public JAXBElement<Filter.FilterAnd> createFilterFilterOrFilterAnd(Filter.FilterAnd value) {
        return new JAXBElement<Filter.FilterAnd>(_FilterFilterAndFilterAnd_QNAME, Filter.FilterAnd.class, Filter.FilterOr.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeFilterRoot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-always-true", scope = Filter.FilterOr.class)
    public JAXBElement<TypeFilterRoot> createFilterFilterOrFilterAlwaysTrue(TypeFilterRoot value) {
        return new JAXBElement<TypeFilterRoot>(_FilterFilterAndFilterAlwaysTrue_QNAME, TypeFilterRoot.class, Filter.FilterOr.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterOr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-or", scope = Filter.FilterOr.class)
    public JAXBElement<Filter.FilterOr> createFilterFilterOrFilterOr(Filter.FilterOr value) {
        return new JAXBElement<Filter.FilterOr>(_FilterFilterAndFilterOr_QNAME, Filter.FilterOr.class, Filter.FilterOr.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterNot }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-not", scope = Filter.FilterOr.class)
    public JAXBElement<Filter.FilterNot> createFilterFilterOrFilterNot(Filter.FilterNot value) {
        return new JAXBElement<Filter.FilterNot>(_FilterFilterAndFilterNot_QNAME, Filter.FilterNot.class, Filter.FilterOr.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Filter.FilterNumOption }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "filter-num-option", scope = Filter.FilterOr.class)
    public JAXBElement<Filter.FilterNumOption> createFilterFilterOrFilterNumOption(Filter.FilterNumOption value) {
        return new JAXBElement<Filter.FilterNumOption>(_FilterFilterAndFilterNumOption_QNAME, Filter.FilterNumOption.class, Filter.FilterOr.class, value);
    }

}
